import THREE from "three";

/** Declaration file generated by dts-gen */

export class MeshBVH {
    constructor(...args: any[]);

    closestPointToGeometry(...args: any[]): void;

    closestPointToPoint(...args: any[]): void;

    distanceToGeometry(...args: any[]): void;

    distanceToPoint(...args: any[]): void;

    intersectsBox(...args: any[]): void;

    intersectsGeometry(...args: any[]): void;

    intersectsSphere(...args: any[]): void;

    raycast(...args: any[]): void;

    raycastFirst(...args: any[]): void;

    shapecast(...args: any[]): void;

}


export class Visualizer {
    constructor(...args: any[]);

    update(...args: any[]): void;

    static DefaultMatrixAutoUpdate: boolean;

}

export const AVERAGE: number;

export const CENTER: number;

export const SAH: number;

export function acceleratedRaycast(raycaster: any, intersects: any): void;

export function computeBoundsTree(options: any): any;

export function disposeBoundsTree(): void;

export namespace Visualizer {
    namespace DefaultUp {
        const isVector3: boolean;

        const x: number;

        const y: number;

        const z: number;

        function add(v: any, w: any): any;

        function addScalar(s: any): any;

        function addScaledVector(v: any, s: any): any;

        function addVectors(a: any, b: any): any;

        function angleTo(v: any): any;

        function applyAxisAngle(axis: any, angle: any): any;

        function applyEuler(euler: any): any;

        function applyMatrix3(m: any): any;

        function applyMatrix4(m: any): any;

        function applyNormalMatrix(m: any): any;

        function applyProjection(m: any): any;

        function applyQuaternion(q: any): any;

        function ceil(): any;

        function clamp(min: any, max: any): any;

        function clampLength(min: any, max: any): any;

        function clampScalar(minVal: any, maxVal: any): any;

        function clone(): any;

        function copy(v: any): any;

        function cross(v: any, w: any): any;

        function crossVectors(a: any, b: any): any;

        function distanceTo(v: any): any;

        function distanceToManhattan(v: any): any;

        function distanceToSquared(v: any): any;

        function divide(v: any): any;

        function divideScalar(scalar: any): any;

        function dot(v: any): any;

        function equals(v: any): any;

        function floor(): any;

        function fromArray(array: any, offset: any): any;

        function fromAttribute(attribute: any, index: any, offset: any): any;

        function fromBufferAttribute(attribute: any, index: any, offset: any): any;

        function getColumnFromMatrix(index: any, matrix: any): any;

        function getComponent(index: any): any;

        function getPositionFromMatrix(m: any): any;

        function getScaleFromMatrix(m: any): any;

        function length(): any;

        function lengthManhattan(): any;

        function lengthSq(): any;

        function lerp(v: any, alpha: any): any;

        function lerpVectors(v1: any, v2: any, alpha: any): any;

        function manhattanDistanceTo(v: any): any;

        function manhattanLength(): any;

        function max(v: any): any;

        function min(v: any): any;

        function multiply(v: any, w: any): any;

        function multiplyScalar(scalar: any): any;

        function multiplyVectors(a: any, b: any): any;

        function negate(): any;

        function normalize(): any;

        function project(camera: any): any;

        function projectOnPlane(planeNormal: any): any;

        function projectOnVector(v: any): any;

        function reflect(normal: any): any;

        function round(): any;

        function roundToZero(): any;

        function set(x: any, y: any, z: any): any;

        function setComponent(index: any, value: any): any;

        function setEulerFromQuaternion(): void;

        function setEulerFromRotationMatrix(): void;

        function setFromCylindrical(c: any): any;

        function setFromCylindricalCoords(radius: any, theta: any, y: any): any;

        function setFromMatrixColumn(m: any, index: any): any;

        function setFromMatrixPosition(m: any): any;

        function setFromMatrixScale(m: any): any;

        function setFromSpherical(s: any): any;

        function setFromSphericalCoords(radius: any, phi: any, theta: any): any;

        function setLength(length: any): any;

        function setScalar(scalar: any): any;

        function setX(x: any): any;

        function setY(y: any): any;

        function setZ(z: any): any;

        function sub(v: any, w: any): any;

        function subScalar(s: any): any;

        function subVectors(a: any, b: any): any;

        function toArray(array: any, offset: any): any;

        function transformDirection(m: any): any;

        function unproject(camera: any): any;

    }

}

